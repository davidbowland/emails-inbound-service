AWSTemplateFormatVersion: 2010-09-09
Description: >-
  emails-inbound-service

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
    Description: Environment for deploy

Mappings:
  EnvironmentMap:
    prod:
      accountApiKeyName: emails-ApiAp-XL6zNpBsD5MQ
      accountApiUrl: 'https://emails-account-api.dbowland.com/v1'
      bucket: emails-service-storage
      domain: dbowland.com
      emailApiKeyName: emails-ApiAp-HAz9kJmN4UNJ
      emailApiUrl: 'https://emails-email-api.dbowland.com/v1'
      logStreamFunction: log-subscriber
      project: emails-inbound-service
      queueApiKeyName: emails-ApiAp-yI1gb3pwh6ea
      queueApiUrl: 'https://emails-queue-api.dbowland.com/v1'
    test:
      accountApiKeyName: emails-ApiAp-n43huA04RZ8a
      accountApiUrl: 'https://emails-account-api.bowland.link/v1'
      bucket: emails-service-storage-test
      domain: bowland.link
      emailApiKeyName: emails-ApiAp-PpyBTSu47hU9
      emailApiUrl: 'https://emails-email-api.bowland.link/v1'
      logStreamFunction: log-subscriber-test
      project: emails-inbound-service-test
      queueApiKeyName: emails-ApiAp-g89VosJ3mW61
      queueApiUrl: 'https://emails-queue-api.bowland.link/v1'

Resources:
  # SES

  # NOTE: Must be activated manually
  ReceiptRuleSet:
    Type: 'AWS::SES::ReceiptRuleSet'
    Properties:
      RuleSetName: !FindInMap [EnvironmentMap, !Ref Environment, project]

  ReceiptRule:
    Type: AWS::SES::ReceiptRule
    DependsOn: [LambdaExecutePermission]
    Properties:
      Rule:
        Actions:
          - S3Action:
              BucketName: !Ref EmailBucket
              ObjectKeyPrefix: 'inbound/'
          - LambdaAction:
              FunctionArn: !GetAtt IncomingEmailProcessor.Arn
              InvocationType: 'Event'
        Enabled: true
        Name: !Sub
          - 'rule-set-${Domain}'
          - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
        Recipients:
          - !FindInMap [EnvironmentMap, !Ref Environment, domain]
        ScanEnabled: true
      # This is not a typo, this should always be the active (production) rule set
      RuleSetName: !FindInMap [EnvironmentMap, 'prod', project]

  # Route 53

  MXRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Comment: !Sub
        - 'Email target for ${Domain}'
        - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
      HostedZoneName: !Sub
        - '${Domain}.'
        - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
      Name: !FindInMap [EnvironmentMap, !Ref Environment, domain]
      ResourceRecords:
        - '10 inbound-smtp.us-east-1.amazonaws.com'
      TTL: 300
      Type: 'MX'

  # Lambda

  IncomingEmailProcessor:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/incoming-email.handleIncomingEmail
      CodeUri: './dist'
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 90
      Description: Incoming SES email
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref EmailBucket
        - Version: 2012-10-17
          Statement:
            - Action:
                - 'apigateway:GET'
              Effect: Allow
              Resource: 'arn:aws:apigateway:us-east-1::/apikeys'
      Environment:
        Variables:
          ACCOUNT_API_KEY_NAME: !FindInMap [EnvironmentMap, !Ref Environment, accountApiKeyName]
          ACCOUNT_API_URL: !FindInMap [EnvironmentMap, !Ref Environment, accountApiUrl]
          EMAIL_API_KEY_NAME: !FindInMap [EnvironmentMap, !Ref Environment, emailApiKeyName]
          EMAIL_API_URL: !FindInMap [EnvironmentMap, !Ref Environment, emailApiUrl]
          EMAIL_BUCKET: !Ref EmailBucket
          EMAIL_FROM: !Sub
            - 'do-not-reply@${Domain}'
            - Domain: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          EMAIL_REGION: us-east-1
          QUEUE_API_KEY_NAME: !FindInMap [EnvironmentMap, !Ref Environment, queueApiKeyName]
          QUEUE_API_URL: !FindInMap [EnvironmentMap, !Ref Environment, queueApiUrl]
      Tags:
        'created-by': 'emails-inbound-service'
        'created-for': 'emails'

  LambdaExecutePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub '${IncomingEmailProcessor.Arn}'
      Principal: ses.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  # CloudWatch

  IncomingEmailLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: IncomingEmailProcessor
    Properties:
      LogGroupName: !Sub /aws/lambda/${IncomingEmailProcessor}
      RetentionInDays: 30

  IncomingEmailLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref IncomingEmailLogGroup

  # S3

  EmailBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: false
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      BucketName: !FindInMap [EnvironmentMap, !Ref Environment, bucket]
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: 'created-by'
          Value: 'emails-inbound-service'
        - Key: 'created-for'
          Value: 'emails'

  EmailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EmailBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${EmailBucket}/*'
            Principal:
              Service: ses.amazonaws.com
            Condition:
              StringLike:
                'aws:Referer':
                  - !Ref AWS::AccountId
